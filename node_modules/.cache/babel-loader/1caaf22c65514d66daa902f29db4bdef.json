{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\praveen.lingegowda\\\\Downloads\\\\redux-saga\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchUserData),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(incrementAsync),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(incrementAsyncParrel),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchLatestData),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchEveryData),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchIncrementAsync),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAndLog),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAndLogTake),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { put, call, takeEvery, all, takeLatest, select } from \"redux-saga/effects\";\n\nvar delay = function delay(ms) {\n  return new Promise(function (res) {\n    return setTimeout(res, ms);\n  });\n};\n\nvar URL = \"https://randomuser.me/api/?results=1&inc=name,registered&nat=fr\";\n\nfunction fetchUserData() {\n  return _regeneratorRuntime.wrap(function fetchUserData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest(\"FETCH_LATEST_REQUESTED\", fetchLatestData);\n\n        case 2:\n          _context.next = 4;\n          return takeEvery(\"FETCH_EVERY_REQUESTED\", fetchEveryData);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} // Our worker Saga: will perform the async increment task\n\n\nexport function incrementAsync() {\n  return _regeneratorRuntime.wrap(function incrementAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return put({\n            type: \"Rotate\"\n          });\n\n        case 2:\n          _context2.next = 4;\n          return call(delay, 5000);\n\n        case 4:\n          _context2.next = 6;\n          return put({\n            type: \"INCREMENT\"\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: \"Rotate\"\n          });\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function incrementAsyncParrel() {\n  return _regeneratorRuntime.wrap(function incrementAsyncParrel$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return put({\n            type: \"INCREMENT\"\n          });\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function fetchLatestData() {\n  var json;\n  return _regeneratorRuntime.wrap(function fetchLatestData$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return fetch(URL).then(function (response) {\n            return response.json();\n          });\n\n        case 2:\n          json = _context4.sent;\n          _context4.next = 5;\n          return put({\n            type: \"FETCH_LATEST_REQUESTED_SUCCESS\",\n            payload: json.results[0].name\n          });\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function fetchEveryData() {\n  var json;\n  return _regeneratorRuntime.wrap(function fetchEveryData$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return fetch(URL).then(function (response) {\n            return response.json();\n          });\n\n        case 2:\n          json = _context5.sent;\n          _context5.next = 5;\n          return put({\n            type: \"FETCH_EVERY_REQUESTED_SUCCESS\",\n            payload: json.results[0].name\n          });\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n} // Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\n\nexport function watchIncrementAsync() {\n  return _regeneratorRuntime.wrap(function watchIncrementAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(\"INCREMENT_ASYNC_PARREL\", incrementAsyncParrel);\n\n        case 2:\n          _context6.next = 4;\n          return takeEvery(\"INCREMENT_ASYNC\", incrementAsync);\n\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAndLog() {\n  return _regeneratorRuntime.wrap(function watchAndLog$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery('*',\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function logger(action) {\n            var state;\n            return _regeneratorRuntime.wrap(function logger$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.next = 2;\n                    return select();\n\n                  case 2:\n                    state = _context7.sent;\n                    console.log('action', action);\n                    console.log('state after', state);\n\n                  case 5:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, logger);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchAndLogTake() {\n  var action, state;\n  return _regeneratorRuntime.wrap(function watchAndLogTake$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          if (!true) {\n            _context9.next = 11;\n            break;\n          }\n\n          _context9.next = 3;\n          return take('*');\n\n        case 3:\n          action = _context9.sent;\n          _context9.next = 6;\n          return select();\n\n        case 6:\n          state = _context9.sent;\n          console.log('action', action);\n          console.log('state after', state);\n          _context9.next = 0;\n          break;\n\n        case 11:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked8);\n} // notice how we now only export the rootSaga\n// single entry point to start all Sagas at once\n\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return all([watchAndLogTake()]);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:\\Users\\praveen.lingegowda\\Downloads\\redux-saga\\src\\component\\saga.js"],"names":["fetchUserData","incrementAsync","incrementAsyncParrel","fetchLatestData","fetchEveryData","watchIncrementAsync","watchAndLog","watchAndLogTake","rootSaga","put","call","takeEvery","all","takeLatest","select","delay","ms","Promise","res","setTimeout","URL","type","fetch","then","response","json","payload","results","name","logger","action","state","console","log","take"],"mappings":"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","sourcesContent":["import { put, call, takeEvery, all, takeLatest, select } from \"redux-saga/effects\";\r\n\r\nconst delay = ms => new Promise(res => setTimeout(res, ms));\r\n\r\nconst URL = \"https://randomuser.me/api/?results=1&inc=name,registered&nat=fr\";\r\n\r\nfunction* fetchUserData() {\r\n  yield takeLatest(\"FETCH_LATEST_REQUESTED\", fetchLatestData);\r\n  yield takeEvery(\"FETCH_EVERY_REQUESTED\", fetchEveryData);\r\n}\r\n\r\n// Our worker Saga: will perform the async increment task\r\nexport function* incrementAsync() {\r\n // console.log(\"saga ends at incrementAsync\");\r\n  yield put({ type: \"Rotate\" });\r\n  yield call(delay, 5000);\r\n  yield put({ type: \"INCREMENT\" });\r\n  yield put({ type: \"Rotate\" });\r\n  //console.log(\"incrementAsync ends\");\r\n}\r\n\r\nexport function* incrementAsyncParrel() {\r\n  //console.log(\"saga ends at incrementAsyncParrel\");\r\n  yield put({ type: \"INCREMENT\" });\r\n}\r\n\r\nexport function* fetchLatestData() {\r\n  const json = yield fetch(URL).then(response => response.json());\r\n//  console.log(Math.random())\r\n  //console.log(\"fetchData\" + JSON.stringify(json.results[0].name));\r\n  yield put({ type: \"FETCH_LATEST_REQUESTED_SUCCESS\",payload:json.results[0].name });\r\n}\r\nexport function* fetchEveryData() {\r\n  const json = yield fetch(URL).then(response => response.json());\r\n // console.log(Math.random())\r\n // console.log(\"fetchData\" + JSON.stringify(json.results[0].name));\r\n  yield put({ type: \"FETCH_EVERY_REQUESTED_SUCCESS\",payload:json.results[0].name});\r\n}\r\n\r\n// Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\r\nexport function* watchIncrementAsync() {\r\n // console.log(\"saga Started at watch\");\r\n  yield takeEvery(\"INCREMENT_ASYNC_PARREL\", incrementAsyncParrel);\r\n  yield takeEvery(\"INCREMENT_ASYNC\", incrementAsync);\r\n}\r\n\r\nfunction* watchAndLog() {\r\n  yield takeEvery('*', function* logger(action) {\r\n    const state = yield select()\r\n\r\n    console.log('action', action)\r\n    console.log('state after', state)\r\n  })\r\n}\r\n\r\nfunction* watchAndLogTake() {\r\n  while (true) {\r\n    const action = yield take('*')\r\n    const state = yield select()\r\n\r\n    console.log('action', action)\r\n    console.log('state after', state)\r\n  }\r\n}\r\n\r\n\r\n// notice how we now only export the rootSaga\r\n// single entry point to start all Sagas at once\r\nexport default function* rootSaga() {\r\n//  console.log(\"saga Started at Root\");\r\n // yield all([fetchUserData(), watchIncrementAsync()]);\r\n  yield all([watchAndLogTake()]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}