{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\praveen.lingegowda\\\\Downloads\\\\redux-saga\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(helloSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(incrementAsync),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(incrementAsyncParrel),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchData),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchIncrementAsync),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { put, call, takeEvery, all, takeLatest } from \"redux-saga/effects\";\n\nvar delay = function delay(ms) {\n  return new Promise(function (res) {\n    return setTimeout(res, ms);\n  });\n};\n\nvar URL = \"https://randomuser.me/api/?results=10&inc=name,registered&nat=fr\";\n\nfunction helloSaga() {\n  return _regeneratorRuntime.wrap(function helloSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return console.log(\"Hello Sagas!\");\n\n        case 2:\n          _context.next = 4;\n          return takeLatest(\"FETCH_REQUESTED\", fetchData);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} // Our worker Saga: will perform the async increment task\n\n\nexport function incrementAsync() {\n  return _regeneratorRuntime.wrap(function incrementAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"saga ends at incrementAsync\");\n          _context2.next = 3;\n          return put({\n            type: \"Rotate\"\n          });\n\n        case 3:\n          _context2.next = 5;\n          return call(delay, 5000);\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            type: \"INCREMENT\"\n          });\n\n        case 7:\n          _context2.next = 9;\n          return put({\n            type: \"Rotate\"\n          });\n\n        case 9:\n          console.log(\"incrementAsync ends\");\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function incrementAsyncParrel() {\n  return _regeneratorRuntime.wrap(function incrementAsyncParrel$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log(\"saga ends at incrementAsyncParrel\");\n          _context3.next = 3;\n          return put({\n            type: \"INCREMENT\"\n          });\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function fetchData() {\n  var json;\n  return _regeneratorRuntime.wrap(function fetchData$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return fetch(URL).then(function (response) {\n            return response.json();\n          });\n\n        case 2:\n          json = _context4.sent;\n          // yield put({ type: \"FETCH_REQUESTED\", json: json.results });\n          console.log(\"fetchData\" + JSON.stringify(json.results[0].name)); //yield put({ type: \"FETCH_REQUESTED\" });\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\n\nexport function watchIncrementAsync() {\n  return _regeneratorRuntime.wrap(function watchIncrementAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          console.log(\"saga Started at watch\");\n          _context5.next = 3;\n          return takeEvery(\"INCREMENT_ASYNC_PARREL\", incrementAsyncParrel);\n\n        case 3:\n          _context5.next = 5;\n          return takeEvery(\"INCREMENT_ASYNC\", incrementAsync);\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n} // notice how we now only export the rootSaga\n// single entry point to start all Sagas at once\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          console.log(\"saga Started at Root\");\n          _context6.next = 3;\n          return all([helloSaga(), watchIncrementAsync()]);\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["C:\\Users\\praveen.lingegowda\\Downloads\\redux-saga\\src\\component\\saga.js"],"names":["helloSaga","incrementAsync","incrementAsyncParrel","fetchData","watchIncrementAsync","rootSaga","put","call","takeEvery","all","takeLatest","delay","ms","Promise","res","setTimeout","URL","console","log","type","fetch","then","response","json","JSON","stringify","results","name"],"mappings":";;;;yBAMUA,S;;;yBAOOC,c;;;yBASAC,oB;;;yBAIAC,S;;;yBAQAC,mB;;;yBAQQC,Q;;AA1CzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoCC,UAApC,QAAsD,oBAAtD;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,EAAE;AAAA,SAAI,IAAIC,OAAJ,CAAY,UAAAC,GAAG;AAAA,WAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAAd;AAAA,GAAf,CAAJ;AAAA,CAAhB;;AAEA,IAAMI,GAAG,GAAG,kEAAZ;;AAEA,SAAUhB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMiB,OAAO,CAACC,GAAR,CAAY,cAAZ,CAAN;;AADJ;AAAA;AAGG,iBAAMR,UAAU,CAAC,iBAAD,EAAoBP,SAApB,CAAhB;;AAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAMA;;;AACA,OAAO,SAAUF,cAAV;AAAA;AAAA;AAAA;AAAA;AACLgB,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AADK;AAEL,iBAAMZ,GAAG,CAAC;AAAEa,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAT;;AAFK;AAAA;AAGL,iBAAMZ,IAAI,CAACI,KAAD,EAAQ,IAAR,CAAV;;AAHK;AAAA;AAIL,iBAAML,GAAG,CAAC;AAAEa,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAT;;AAJK;AAAA;AAKL,iBAAMb,GAAG,CAAC;AAAEa,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAT;;AALK;AAMLF,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;;AANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP,OAAO,SAAUhB,oBAAV;AAAA;AAAA;AAAA;AAAA;AACLe,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AADK;AAEL,iBAAMZ,GAAG,CAAC;AAAEa,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAT;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUhB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ,iBAAMiB,KAAK,CAACJ,GAAD,CAAL,CAAWK,IAAX,CAAgB,UAAAC,QAAQ;AAAA,mBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,WAAxB,CAAN;;AADR;AACCA,UAAAA,IADD;AAEN;AACCN,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAcM,IAAI,CAACC,SAAL,CAAeF,IAAI,CAACG,OAAL,CAAa,CAAb,EAAgBC,IAA/B,CAA1B,EAHK,CAIL;;AAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAOP;;AACA,OAAO,SAAUvB,mBAAV;AAAA;AAAA;AAAA;AAAA;AACLa,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AADK;AAEL,iBAAMV,SAAS,CAAC,wBAAD,EAA2BN,oBAA3B,CAAf;;AAFK;AAAA;AAGL,iBAAMM,SAAS,CAAC,iBAAD,EAAoBP,cAApB,CAAf;;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAMP;AACA;;AACA,eAAe,SAAUI,QAAV;AAAA;AAAA;AAAA;AAAA;AACbY,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AADa;AAEb,iBAAMT,GAAG,CAAC,CAACT,SAAS,EAAV,EAAcI,mBAAmB,EAAjC,CAAD,CAAT;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put, call, takeEvery, all, takeLatest } from \"redux-saga/effects\";\r\n\r\nconst delay = ms => new Promise(res => setTimeout(res, ms));\r\n\r\nconst URL = \"https://randomuser.me/api/?results=10&inc=name,registered&nat=fr\";\r\n\r\nfunction* helloSaga() {\r\n    yield console.log(\"Hello Sagas!\");\r\n  // yield console.log(\"Hello Sagas123\");\r\n   yield takeLatest(\"FETCH_REQUESTED\", fetchData);\r\n}\r\n\r\n// Our worker Saga: will perform the async increment task\r\nexport function* incrementAsync() {\r\n  console.log(\"saga ends at incrementAsync\");\r\n  yield put({ type: \"Rotate\" });\r\n  yield call(delay, 5000);\r\n  yield put({ type: \"INCREMENT\" });\r\n  yield put({ type: \"Rotate\" });\r\n  console.log(\"incrementAsync ends\");\r\n}\r\n\r\nexport function* incrementAsyncParrel() {\r\n  console.log(\"saga ends at incrementAsyncParrel\");\r\n  yield put({ type: \"INCREMENT\" });\r\n}\r\nexport function* fetchData() {\r\n  const json = yield fetch(URL).then(response => response.json());\r\n // yield put({ type: \"FETCH_REQUESTED\", json: json.results });\r\n  console.log(\"fetchData\" + JSON.stringify(json.results[0].name));\r\n  //yield put({ type: \"FETCH_REQUESTED\" });\r\n}\r\n\r\n// Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\r\nexport function* watchIncrementAsync() {\r\n  console.log(\"saga Started at watch\");\r\n  yield takeEvery(\"INCREMENT_ASYNC_PARREL\", incrementAsyncParrel);\r\n  yield takeEvery(\"INCREMENT_ASYNC\", incrementAsync);\r\n}\r\n\r\n// notice how we now only export the rootSaga\r\n// single entry point to start all Sagas at once\r\nexport default function* rootSaga() {\r\n  console.log(\"saga Started at Root\");\r\n  yield all([helloSaga(), watchIncrementAsync()]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}